// Generated by `wit-bindgen` 0.11.0. DO NOT EDIT!
pub mod foo {
  pub mod foo {
    
    #[allow(clippy::all)]
    pub mod integers {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[allow(clippy::all)]
      pub fn a1(x: u8,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "a1"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(x));
        }
      }
      #[allow(clippy::all)]
      pub fn a2(x: i8,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "a2"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(x));
        }
      }
      #[allow(clippy::all)]
      pub fn a3(x: u16,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "a3"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(x));
        }
      }
      #[allow(clippy::all)]
      pub fn a4(x: i16,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "a4"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(x));
        }
      }
      #[allow(clippy::all)]
      pub fn a5(x: u32,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "a5"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(x));
        }
      }
      #[allow(clippy::all)]
      pub fn a6(x: i32,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "a6"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(x));
        }
      }
      #[allow(clippy::all)]
      pub fn a7(x: u64,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "a7"]
            fn wit_import(_: i64, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i64(x));
        }
      }
      #[allow(clippy::all)]
      pub fn a8(x: i64,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "a8"]
            fn wit_import(_: i64, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i64(x));
        }
      }
      #[allow(clippy::all)]
      pub fn a9(p1: u8,p2: i8,p3: u16,p4: i16,p5: u32,p6: i32,p7: u64,p8: i64,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "a9"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i64, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i64, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(p1), wit_bindgen::rt::as_i32(p2), wit_bindgen::rt::as_i32(p3), wit_bindgen::rt::as_i32(p4), wit_bindgen::rt::as_i32(p5), wit_bindgen::rt::as_i32(p6), wit_bindgen::rt::as_i64(p7), wit_bindgen::rt::as_i64(p8));
        }
      }
      #[allow(clippy::all)]
      pub fn r1() -> u8{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "r1"]
            fn wit_import() -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          ret as u8
        }
      }
      #[allow(clippy::all)]
      pub fn r2() -> i8{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "r2"]
            fn wit_import() -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          ret as i8
        }
      }
      #[allow(clippy::all)]
      pub fn r3() -> u16{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "r3"]
            fn wit_import() -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          ret as u16
        }
      }
      #[allow(clippy::all)]
      pub fn r4() -> i16{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "r4"]
            fn wit_import() -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          ret as i16
        }
      }
      #[allow(clippy::all)]
      pub fn r5() -> u32{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "r5"]
            fn wit_import() -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          ret as u32
        }
      }
      #[allow(clippy::all)]
      pub fn r6() -> i32{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "r6"]
            fn wit_import() -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          ret
        }
      }
      #[allow(clippy::all)]
      pub fn r7() -> u64{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "r7"]
            fn wit_import() -> i64;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i64{ unreachable!() }
          let ret = wit_import();
          ret as u64
        }
      }
      #[allow(clippy::all)]
      pub fn r8() -> i64{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "r8"]
            fn wit_import() -> i64;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i64{ unreachable!() }
          let ret = wit_import();
          ret
        }
      }
      #[allow(clippy::all)]
      pub fn pair_ret() -> (i64,u8,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(8))]
          struct RetArea([u8; 16]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/integers")]
          extern "C" {
            #[link_name = "pair-ret"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i64);
          let l2 = i32::from(*((ptr0 + 8) as *const u8));
          (l1, l2 as u8)
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod foo {
    pub mod foo {
      
      #[allow(clippy::all)]
      pub mod integers {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#a1"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_a1(arg0: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::a1(arg0 as u8);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#a2"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_a2(arg0: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::a2(arg0 as i8);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#a3"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_a3(arg0: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::a3(arg0 as u16);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#a4"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_a4(arg0: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::a4(arg0 as i16);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#a5"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_a5(arg0: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::a5(arg0 as u32);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#a6"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_a6(arg0: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::a6(arg0);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#a7"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_a7(arg0: i64,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::a7(arg0 as u64);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#a8"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_a8(arg0: i64,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::a8(arg0);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#a9"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_a9(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i64,arg7: i64,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::a9(arg0 as u8, arg1 as i8, arg2 as u16, arg3 as i16, arg4 as u32, arg5, arg6 as u64, arg7);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#r1"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_r1() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::r1();
            wit_bindgen::rt::as_i32(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#r2"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_r2() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::r2();
            wit_bindgen::rt::as_i32(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#r3"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_r3() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::r3();
            wit_bindgen::rt::as_i32(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#r4"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_r4() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::r4();
            wit_bindgen::rt::as_i32(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#r5"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_r5() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::r5();
            wit_bindgen::rt::as_i32(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#r6"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_r6() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::r6();
            wit_bindgen::rt::as_i32(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#r7"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_r7() -> i64 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::r7();
            wit_bindgen::rt::as_i64(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#r8"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_r8() -> i64 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::r8();
            wit_bindgen::rt::as_i64(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/integers#pair-ret"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_pair_ret() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::pair_ret();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let (t2_0, t2_1, ) = result0;
            *((ptr1 + 0) as *mut i64) = wit_bindgen::rt::as_i64(t2_0);
            *((ptr1 + 8) as *mut u8) = (wit_bindgen::rt::as_i32(t2_1)) as u8;
            ptr1
          }
        };
        use super::super::super::super::Stub as _GuestImpl;
        pub trait Guest {
          fn a1(x: u8,);
          fn a2(x: i8,);
          fn a3(x: u16,);
          fn a4(x: i16,);
          fn a5(x: u32,);
          fn a6(x: i32,);
          fn a7(x: u64,);
          fn a8(x: i64,);
          fn a9(p1: u8,p2: i8,p3: u16,p4: i16,p5: u32,p6: i32,p7: u64,p8: i64,);
          fn r1() -> u8;
          fn r2() -> i8;
          fn r3() -> u16;
          fn r4() -> i16;
          fn r5() -> u32;
          fn r6() -> i32;
          fn r7() -> u64;
          fn r8() -> i64;
          fn pair_ret() -> (i64,u8,);
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(8))]
        struct _RetArea([u8; 16]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 16]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:the-world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1081] = [3, 0, 9, 116, 104, 101, 45, 119, 111, 114, 108, 100, 0, 97, 115, 109, 13, 0, 1, 0, 7, 181, 7, 1, 65, 4, 1, 66, 37, 1, 64, 1, 1, 120, 125, 1, 0, 4, 0, 2, 97, 49, 1, 0, 1, 64, 1, 1, 120, 126, 1, 0, 4, 0, 2, 97, 50, 1, 1, 1, 64, 1, 1, 120, 123, 1, 0, 4, 0, 2, 97, 51, 1, 2, 1, 64, 1, 1, 120, 124, 1, 0, 4, 0, 2, 97, 52, 1, 3, 1, 64, 1, 1, 120, 121, 1, 0, 4, 0, 2, 97, 53, 1, 4, 1, 64, 1, 1, 120, 122, 1, 0, 4, 0, 2, 97, 54, 1, 5, 1, 64, 1, 1, 120, 119, 1, 0, 4, 0, 2, 97, 55, 1, 6, 1, 64, 1, 1, 120, 120, 1, 0, 4, 0, 2, 97, 56, 1, 7, 1, 64, 8, 2, 112, 49, 125, 2, 112, 50, 126, 2, 112, 51, 123, 2, 112, 52, 124, 2, 112, 53, 121, 2, 112, 54, 122, 2, 112, 55, 119, 2, 112, 56, 120, 1, 0, 4, 0, 2, 97, 57, 1, 8, 1, 64, 0, 0, 125, 4, 0, 2, 114, 49, 1, 9, 1, 64, 0, 0, 126, 4, 0, 2, 114, 50, 1, 10, 1, 64, 0, 0, 123, 4, 0, 2, 114, 51, 1, 11, 1, 64, 0, 0, 124, 4, 0, 2, 114, 52, 1, 12, 1, 64, 0, 0, 121, 4, 0, 2, 114, 53, 1, 13, 1, 64, 0, 0, 122, 4, 0, 2, 114, 54, 1, 14, 1, 64, 0, 0, 119, 4, 0, 2, 114, 55, 1, 15, 1, 64, 0, 0, 120, 4, 0, 2, 114, 56, 1, 16, 1, 111, 2, 120, 125, 1, 64, 0, 0, 17, 4, 0, 8, 112, 97, 105, 114, 45, 114, 101, 116, 1, 18, 4, 1, 16, 102, 111, 111, 58, 102, 111, 111, 47, 105, 110, 116, 101, 103, 101, 114, 115, 5, 0, 1, 65, 4, 1, 66, 37, 1, 64, 1, 1, 120, 125, 1, 0, 4, 0, 2, 97, 49, 1, 0, 1, 64, 1, 1, 120, 126, 1, 0, 4, 0, 2, 97, 50, 1, 1, 1, 64, 1, 1, 120, 123, 1, 0, 4, 0, 2, 97, 51, 1, 2, 1, 64, 1, 1, 120, 124, 1, 0, 4, 0, 2, 97, 52, 1, 3, 1, 64, 1, 1, 120, 121, 1, 0, 4, 0, 2, 97, 53, 1, 4, 1, 64, 1, 1, 120, 122, 1, 0, 4, 0, 2, 97, 54, 1, 5, 1, 64, 1, 1, 120, 119, 1, 0, 4, 0, 2, 97, 55, 1, 6, 1, 64, 1, 1, 120, 120, 1, 0, 4, 0, 2, 97, 56, 1, 7, 1, 64, 8, 2, 112, 49, 125, 2, 112, 50, 126, 2, 112, 51, 123, 2, 112, 52, 124, 2, 112, 53, 121, 2, 112, 54, 122, 2, 112, 55, 119, 2, 112, 56, 120, 1, 0, 4, 0, 2, 97, 57, 1, 8, 1, 64, 0, 0, 125, 4, 0, 2, 114, 49, 1, 9, 1, 64, 0, 0, 126, 4, 0, 2, 114, 50, 1, 10, 1, 64, 0, 0, 123, 4, 0, 2, 114, 51, 1, 11, 1, 64, 0, 0, 124, 4, 0, 2, 114, 52, 1, 12, 1, 64, 0, 0, 121, 4, 0, 2, 114, 53, 1, 13, 1, 64, 0, 0, 122, 4, 0, 2, 114, 54, 1, 14, 1, 64, 0, 0, 119, 4, 0, 2, 114, 55, 1, 15, 1, 64, 0, 0, 120, 4, 0, 2, 114, 56, 1, 16, 1, 111, 2, 120, 125, 1, 64, 0, 0, 17, 4, 0, 8, 112, 97, 105, 114, 45, 114, 101, 116, 1, 18, 3, 1, 16, 102, 111, 111, 58, 102, 111, 111, 47, 105, 110, 116, 101, 103, 101, 114, 115, 5, 0, 1, 66, 37, 1, 64, 1, 1, 120, 125, 1, 0, 4, 0, 2, 97, 49, 1, 0, 1, 64, 1, 1, 120, 126, 1, 0, 4, 0, 2, 97, 50, 1, 1, 1, 64, 1, 1, 120, 123, 1, 0, 4, 0, 2, 97, 51, 1, 2, 1, 64, 1, 1, 120, 124, 1, 0, 4, 0, 2, 97, 52, 1, 3, 1, 64, 1, 1, 120, 121, 1, 0, 4, 0, 2, 97, 53, 1, 4, 1, 64, 1, 1, 120, 122, 1, 0, 4, 0, 2, 97, 54, 1, 5, 1, 64, 1, 1, 120, 119, 1, 0, 4, 0, 2, 97, 55, 1, 6, 1, 64, 1, 1, 120, 120, 1, 0, 4, 0, 2, 97, 56, 1, 7, 1, 64, 8, 2, 112, 49, 125, 2, 112, 50, 126, 2, 112, 51, 123, 2, 112, 52, 124, 2, 112, 53, 121, 2, 112, 54, 122, 2, 112, 55, 119, 2, 112, 56, 120, 1, 0, 4, 0, 2, 97, 57, 1, 8, 1, 64, 0, 0, 125, 4, 0, 2, 114, 49, 1, 9, 1, 64, 0, 0, 126, 4, 0, 2, 114, 50, 1, 10, 1, 64, 0, 0, 123, 4, 0, 2, 114, 51, 1, 11, 1, 64, 0, 0, 124, 4, 0, 2, 114, 52, 1, 12, 1, 64, 0, 0, 121, 4, 0, 2, 114, 53, 1, 13, 1, 64, 0, 0, 122, 4, 0, 2, 114, 54, 1, 14, 1, 64, 0, 0, 119, 4, 0, 2, 114, 55, 1, 15, 1, 64, 0, 0, 120, 4, 0, 2, 114, 56, 1, 16, 1, 111, 2, 120, 125, 1, 64, 0, 0, 17, 4, 0, 8, 112, 97, 105, 114, 45, 114, 101, 116, 1, 18, 4, 1, 16, 102, 111, 111, 58, 102, 111, 111, 47, 105, 110, 116, 101, 103, 101, 114, 115, 5, 1, 4, 1, 17, 102, 111, 111, 58, 102, 111, 111, 47, 116, 104, 101, 45, 119, 111, 114, 108, 100, 4, 1, 11, 17, 1, 1, 11, 102, 111, 111, 58, 102, 111, 111, 47, 119, 105, 116, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 52, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 49, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}

#[derive(Debug)]
pub struct Stub;
impl exports::foo::foo::integers::Guest for Stub {
  fn a1(x: u8,){ unreachable!() }
  fn a2(x: i8,){ unreachable!() }
  fn a3(x: u16,){ unreachable!() }
  fn a4(x: i16,){ unreachable!() }
  fn a5(x: u32,){ unreachable!() }
  fn a6(x: i32,){ unreachable!() }
  fn a7(x: u64,){ unreachable!() }
  fn a8(x: i64,){ unreachable!() }
  fn a9(p1: u8,p2: i8,p3: u16,p4: i16,p5: u32,p6: i32,p7: u64,p8: i64,){ unreachable!() }
  fn r1() -> u8{ unreachable!() }
  fn r2() -> i8{ unreachable!() }
  fn r3() -> u16{ unreachable!() }
  fn r4() -> i16{ unreachable!() }
  fn r5() -> u32{ unreachable!() }
  fn r6() -> i32{ unreachable!() }
  fn r7() -> u64{ unreachable!() }
  fn r8() -> i64{ unreachable!() }
  fn pair_ret() -> (i64,u8,){ unreachable!() }
}
